---
type Props = {
  images: string[];
};
const { images }: Props = Astro.props;
const sliderId = Math.random().toString(36).substring(2, 9); // ID Ãºnico para cada slider
---

<section class="overflow-hidden relative w-full aspect-[16/12] lg:max-w-3xl md:max-w-2xl sm:max-w-md" data-slider-id={sliderId}>
  <!-- Slides -->
  <div class="slider flex transition-transform duration-500 ease-out w-full h-full">
    {images.map((image, index) => (
      <img 
        src={image} 
        alt={`Slide ${index + 1}`} 
        class="w-full h-full object-cover flex-shrink-0 aspect-[16/12] rounded-lg"
      />
    ))}
  </div>

  <!-- Controls -->
  <button class="prevSlide absolute top-1/2 left-4 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 hover:border-white hover:border-2 rounded-full z-10">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-compact-left"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M13 20l-3 -8l3 -8" />
    </svg>
  </button>
  <button class="nextSlide absolute top-1/2 right-4 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 hover:border-white hover:border-2 rounded-full z-10">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-compact-right"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M11 4l3 8l-3 8" />
    </svg>
  </button>

  <!-- Indicators -->
  <div class="points absolute bottom-4 right-0 left-0 flex justify-center gap-2 z-10">
    {images.map((_, index) => (
      <button class="indicator w-3 h-3 bg-gray-400 rounded-full transition-transform duration-300 hover:scale-125" data-index={index}></button>
    ))}
  </div>
</section>

<script is:inline>
  document.querySelectorAll("[data-slider-id]").forEach((sliderContainer) => {
    let currentIndex = 0;
    const slider = sliderContainer.querySelector(".slider");
    const prevSlide = sliderContainer.querySelector(".prevSlide");
    const nextSlide = sliderContainer.querySelector(".nextSlide");
    const points = sliderContainer.querySelectorAll(".indicator");
    const slideCount = slider.children.length;

    const updateSlider = () => {
      slider.style.transform = `translateX(-${currentIndex * 100}%)`;
      points.forEach((point, index) => {
        point.classList.toggle("bg-gray-800", index === currentIndex);
        point.classList.toggle("bg-gray-400", index !== currentIndex);
      });
    };

    updateSlider();

    prevSlide.addEventListener("click", () => {
      currentIndex = currentIndex === 0 ? slideCount - 1 : currentIndex - 1;
      updateSlider();
    });

    nextSlide.addEventListener("click", () => {
      currentIndex = currentIndex === slideCount - 1 ? 0 : currentIndex + 1;
      updateSlider();
    });

    points.forEach((point) => {
      point.addEventListener("click", (event) => {
        currentIndex = Number(event.target.dataset.index);
        updateSlider();
      });
    });

    let autoSlide = setInterval(() => {
      currentIndex = currentIndex === slideCount - 1 ? 0 : currentIndex + 1;
      updateSlider();
    }, 5000);

    [prevSlide, nextSlide, ...points].forEach((element) => {
      element.addEventListener("mouseenter", () => clearInterval(autoSlide));
      element.addEventListener("mouseleave", () => {
        autoSlide = setInterval(() => {
          currentIndex = currentIndex === slideCount - 1 ? 0 : currentIndex + 1;
          updateSlider();
        }, 5000);
      });
    });
  });
</script>
